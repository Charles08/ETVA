<?php

require 'lib/model/om/BaseEtvaCluster.php';


/**
 * Skeleton subclass for representing a row from the 'cluster' table.
 *
 * 
 *
 * This class was autogenerated by Propel 1.4.1 on:
 *
 * Tue Jul  6 09:44:12 2010
 *
 * You should add additional methods to this class to meet the
 * application requirements.  This class will only be generated as
 * long as it does not already exist in the output directory.
 *
 * @package    lib.model
 */
class EtvaCluster extends BaseEtvaCluster {


    /*
     * sends soap to cluster nodes....
     */
    public function soapSend($method, $params = null, EtvaNode $except_node = null,$forceRequest = false, $rcv_timeout = 0, $all = false)
    {
        $c = new Criteria();
        if($except_node) $c->add(EtvaNodePeer::UUID ,$except_node->getUuid(),Criteria::ALT_NOT_EQUAL);
        if( !$all ) $c->add(EtvaNodePeer::INITIALIZE, EtvaNode::INITIALIZE_OK, Criteria::EQUAL );
        $c->add(EtvaNodePeer::CLUSTER_ID, $this->getId());

        $all_nodes = EtvaNodePeer::doSelect($c);
        $responses = array();

        foreach($all_nodes as $node){

            $responses[$node->getId()] = $node->soapSend($method,$params,$forceRequest,$rcv_timeout);

        }

        return $responses;
    }
  
    public function getSharedPvs()
    {

        /*
         *
         * get shared pvs of defined cluster.         
         */

        $criteria = new Criteria();
        $criteria->add(EtvaClusterPeer::ID,$this->getId());
        $criteria->addJoin(EtvaPhysicalvolumePeer::CLUSTER_ID,EtvaClusterPeer::ID);
        $criteria->add(EtvaPhysicalvolumePeer::STORAGE_TYPE,EtvaPhysicalvolume::STORAGE_TYPE_LOCAL_MAP,Criteria::ALT_NOT_EQUAL);
        $etva_shared_pvs = EtvaPhysicalvolumePeer::doSelect($criteria);
        return $etva_shared_pvs;

        

    }

    public function getSharedVgs()
    {

        /*
         *
         * get shared vgs of defined cluster.         
         */

        $criteria = new Criteria();
        $criteria->add(EtvaClusterPeer::ID,$this->getId());
        $criteria->addJoin(EtvaVolumegroupPeer::CLUSTER_ID,EtvaClusterPeer::ID);
        $criteria->add(EtvaVolumegroupPeer::STORAGE_TYPE,EtvaVolumegroup::STORAGE_TYPE_LOCAL_MAP,Criteria::ALT_NOT_EQUAL);
        $etva_shared_vgs = EtvaVolumegroupPeer::doSelect($criteria);
        return $etva_shared_vgs;

    }

    public function getSharedLvs()
    {

        /*
         *
         * get shared lvs of defined cluster.
         */
        $etva_shared_lvs = array();
        $criteria = new Criteria();
        $criteria->add(EtvaLogicalvolumePeer::STORAGE_TYPE,EtvaLogicalvolume::STORAGE_TYPE_LOCAL_MAP,Criteria::ALT_NOT_EQUAL);
        $etva_shared_lvs = $this->getEtvaLogicalvolumes($criteria);
                
        return $etva_shared_lvs;
    }

} // EtvaCluster
