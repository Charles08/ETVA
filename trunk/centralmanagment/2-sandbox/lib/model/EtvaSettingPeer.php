<?php

require 'lib/model/om/BaseEtvaSettingPeer.php';


/**
 * Skeleton subclass for performing query and update operations on the 'setting' table.
 *
 * 
 *
 * This class was autogenerated by Propel 1.4.1 on:
 *
 * Tue Apr 27 15:57:55 2010
 *
 * You should add additional methods to this class to meet the
 * application requirements.  This class will only be generated as
 * long as it does not already exist in the output directory.
 *
 * @package    lib.model
 */
class EtvaSettingPeer extends BaseEtvaSettingPeer {

    const _ERR_VNCKEYMAP_CHANGE   = 'Default system VNC keymap could NOT be changed to %name%';
    const _OK_VNCKEYMAP_CHANGE_   = 'Default system VNC keymap changed to %name%';    

    const _ERR_SETTING_CHANGE_  = 'System settings could NOT be changed! %name%';
    const _OK_SETTING_CHANGE_   = 'System setting %name% with value %value% changed successfully';

    const _OK_SETTING_CONNECTIVITY_SAVE_ = 'System connectivity settings saved successfully';

    const _ERR_SETTING_REMOTE_CONNECTIVITY_SAVE_ = 'Could not change remote CM IP setting. %info%';

    const _ERR_NOTFOUND_PARAM_   = 'Setting with name %id% could not be found';

    const _SMTP_SERVER_     = 'smtpserver';
    const _SMTP_PORT_       = 'smtpport';
    const _SMTP_USE_AUTH_   = 'smtpuseauth';
    const _SMTP_USERNAME_   = 'smtpusername';
    const _SMTP_KEY_        = 'smtpkey';
    const _SMTP_SECURITY_   = 'smtpsecurity_type';

    const _ALERT_EMAIL_   = 'alert_email';
    const _ALERT_EMAIL_FROM_   = 'alert_email_from';
    const _ALERT_SUBJECT_PREFIX_   = 'alert_subject_prefix';

    public static function addDefault($param){
        $default = sfConfig::get('app_setting_'.$param);
        if(isset($default)){
            $new = new EtvaSetting();
            $new->setPrimaryKey($param);
            $new->setValue($default);            
            
            if(!$new->save()) return false;
            else return $new;
        }
        return false;
    }


    public static function retrieveByPK($pk, PropelPDO $con = null)
	{
        $etva_setting = parent::retrieveByPK($pk, $con);

        if(!$etva_setting)
            $etva_setting = self::addDefault($pk);
        return $etva_setting;
	}
    
    public static function retrieveByParam($param , PropelPDO $con = null)
    {
        $c  = new Criteria();
        $c->add(EtvaSettingPeer::PARAM, $param);
        return EtvaSettingPeer::doSelectOne($c);
    }

    public function updateSetting($param, $value){
        $c = new Criteria();
        $c->add(EtvaSettingPeer::PARAM, $param);
        $obj = EtvaSettingPeer::doSelectOne($c);
        if($obj === null){
            $obj = new EtvaSetting();
            $obj->setParam($param);
        }
        $obj->setValue($value);
        $obj->save();
    }
} // EtvaSettingPeer
