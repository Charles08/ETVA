<?php

/**
 * Base class that represents a row from the 'server' table.
 *
 * 
 *
 * This class was autogenerated by Propel 1.3.0-dev on:
 *
 * Fri Aug 28 18:22:07 2009
 *
 * @package    lib.model.om
 */
abstract class BaseEtvaServer extends BaseObject  implements Persistent {


  const PEER = 'EtvaServerPeer';

	/**
	 * The Peer class.
	 * Instance provides a convenient way of calling static methods on a class
	 * that calling code may not be able to identify.
	 * @var        EtvaServerPeer
	 */
	protected static $peer;

	/**
	 * The value for the id field.
	 * @var        int
	 */
	protected $id;

	/**
	 * The value for the logicalvolume_id field.
	 * @var        int
	 */
	protected $logicalvolume_id;

	/**
	 * The value for the node_id field.
	 * @var        int
	 */
	protected $node_id;

	/**
	 * The value for the name field.
	 * @var        string
	 */
	protected $name;

	/**
	 * The value for the description field.
	 * @var        string
	 */
	protected $description;

	/**
	 * The value for the ip field.
	 * @var        string
	 */
	protected $ip;

	/**
	 * The value for the vnc_port field.
	 * @var        int
	 */
	protected $vnc_port;

	/**
	 * The value for the agent_port field.
	 * @var        int
	 */
	protected $agent_port;

	/**
	 * The value for the agent_tmpl field.
	 * @var        string
	 */
	protected $agent_tmpl;

	/**
	 * The value for the uid field.
	 * @var        string
	 */
	protected $uid;

	/**
	 * The value for the mem field.
	 * @var        string
	 */
	protected $mem;

	/**
	 * The value for the vcpu field.
	 * @var        int
	 */
	protected $vcpu;

	/**
	 * The value for the cpuset field.
	 * @var        string
	 */
	protected $cpuset;

	/**
	 * The value for the location field.
	 * @var        string
	 */
	protected $location;

	/**
	 * The value for the network_cards field.
	 * @var        int
	 */
	protected $network_cards;

	/**
	 * The value for the state field.
	 * @var        string
	 */
	protected $state;

	/**
	 * The value for the mac_addresses field.
	 * @var        string
	 */
	protected $mac_addresses;

	/**
	 * The value for the sf_guard_group_id field.
	 * @var        int
	 */
	protected $sf_guard_group_id;

	/**
	 * The value for the created_at field.
	 * @var        string
	 */
	protected $created_at;

	/**
	 * The value for the updated_at field.
	 * @var        string
	 */
	protected $updated_at;

	/**
	 * @var        EtvaLogicalvolume
	 */
	protected $aEtvaLogicalvolume;

	/**
	 * @var        EtvaNode
	 */
	protected $aEtvaNode;

	/**
	 * @var        sfGuardGroup
	 */
	protected $asfGuardGroup;

	/**
	 * @var        array EtvaAgent[] Collection to store aggregation of EtvaAgent objects.
	 */
	protected $collEtvaAgents;

	/**
	 * @var        Criteria The criteria used to select the current contents of collEtvaAgents.
	 */
	private $lastEtvaAgentCriteria = null;

	/**
	 * @var        array EtvaNetwork[] Collection to store aggregation of EtvaNetwork objects.
	 */
	protected $collEtvaNetworks;

	/**
	 * @var        Criteria The criteria used to select the current contents of collEtvaNetworks.
	 */
	private $lastEtvaNetworkCriteria = null;

	/**
	 * @var        array EtvaService[] Collection to store aggregation of EtvaService objects.
	 */
	protected $collEtvaServices;

	/**
	 * @var        Criteria The criteria used to select the current contents of collEtvaServices.
	 */
	private $lastEtvaServiceCriteria = null;

	/**
	 * Flag to prevent endless save loop, if this object is referenced
	 * by another object which falls in this transaction.
	 * @var        boolean
	 */
	protected $alreadyInSave = false;

	/**
	 * Flag to prevent endless validation loop, if this object is referenced
	 * by another object which falls in this transaction.
	 * @var        boolean
	 */
	protected $alreadyInValidation = false;

	/**
	 * Initializes internal state of BaseEtvaServer object.
	 * @see        applyDefaults()
	 */
	public function __construct()
	{
		parent::__construct();
		$this->applyDefaultValues();
	}

	/**
	 * Applies default values to this object.
	 * This method should be called from the object's constructor (or
	 * equivalent initialization method).
	 * @see        __construct()
	 */
	public function applyDefaultValues()
	{
	}

	/**
	 * Get the [id] column value.
	 * 
	 * @return     int
	 */
	public function getId()
	{
		return $this->id;
	}

	/**
	 * Get the [logicalvolume_id] column value.
	 * 
	 * @return     int
	 */
	public function getLogicalvolumeId()
	{
		return $this->logicalvolume_id;
	}

	/**
	 * Get the [node_id] column value.
	 * 
	 * @return     int
	 */
	public function getNodeId()
	{
		return $this->node_id;
	}

	/**
	 * Get the [name] column value.
	 * 
	 * @return     string
	 */
	public function getName()
	{
		return $this->name;
	}

	/**
	 * Get the [description] column value.
	 * 
	 * @return     string
	 */
	public function getDescription()
	{
		return $this->description;
	}

	/**
	 * Get the [ip] column value.
	 * 
	 * @return     string
	 */
	public function getIp()
	{
		return $this->ip;
	}

	/**
	 * Get the [vnc_port] column value.
	 * 
	 * @return     int
	 */
	public function getVncPort()
	{
		return $this->vnc_port;
	}

	/**
	 * Get the [agent_port] column value.
	 * 
	 * @return     int
	 */
	public function getAgentPort()
	{
		return $this->agent_port;
	}

	/**
	 * Get the [agent_tmpl] column value.
	 * 
	 * @return     string
	 */
	public function getAgentTmpl()
	{
		return $this->agent_tmpl;
	}

	/**
	 * Get the [uid] column value.
	 * 
	 * @return     string
	 */
	public function getUid()
	{
		return $this->uid;
	}

	/**
	 * Get the [mem] column value.
	 * 
	 * @return     string
	 */
	public function getMem()
	{
		return $this->mem;
	}

	/**
	 * Get the [vcpu] column value.
	 * 
	 * @return     int
	 */
	public function getVcpu()
	{
		return $this->vcpu;
	}

	/**
	 * Get the [cpuset] column value.
	 * 
	 * @return     string
	 */
	public function getCpuset()
	{
		return $this->cpuset;
	}

	/**
	 * Get the [location] column value.
	 * 
	 * @return     string
	 */
	public function getLocation()
	{
		return $this->location;
	}

	/**
	 * Get the [network_cards] column value.
	 * 
	 * @return     int
	 */
	public function getNetworkCards()
	{
		return $this->network_cards;
	}

	/**
	 * Get the [state] column value.
	 * 
	 * @return     string
	 */
	public function getState()
	{
		return $this->state;
	}

	/**
	 * Get the [mac_addresses] column value.
	 * 
	 * @return     string
	 */
	public function getMacAddresses()
	{
		return $this->mac_addresses;
	}

	/**
	 * Get the [sf_guard_group_id] column value.
	 * 
	 * @return     int
	 */
	public function getSfGuardGroupId()
	{
		return $this->sf_guard_group_id;
	}

	/**
	 * Get the [optionally formatted] temporal [created_at] column value.
	 * 
	 *
	 * @param      string $format The date/time format string (either date()-style or strftime()-style).
	 *							If format is NULL, then the raw DateTime object will be returned.
	 * @return     mixed Formatted date/time value as string or DateTime object (if format is NULL), NULL if column is NULL
	 * @throws     PropelException - if unable to parse/validate the date/time value.
	 */
	public function getCreatedAt($format = 'Y-m-d H:i:s')
	{
		if ($this->created_at === null) {
			return null;
		}



		try {
			$dt = new DateTime($this->created_at);
		} catch (Exception $x) {
			throw new PropelException("Internally stored date/time/timestamp value could not be converted to DateTime: " . var_export($this->created_at, true), $x);
		}

		if ($format === null) {
			// Because propel.useDateTimeClass is TRUE, we return a DateTime object.
			return $dt;
		} elseif (strpos($format, '%') !== false) {
			return strftime($format, $dt->format('U'));
		} else {
			return $dt->format($format);
		}
	}

	/**
	 * Get the [optionally formatted] temporal [updated_at] column value.
	 * 
	 *
	 * @param      string $format The date/time format string (either date()-style or strftime()-style).
	 *							If format is NULL, then the raw DateTime object will be returned.
	 * @return     mixed Formatted date/time value as string or DateTime object (if format is NULL), NULL if column is NULL
	 * @throws     PropelException - if unable to parse/validate the date/time value.
	 */
	public function getUpdatedAt($format = 'Y-m-d H:i:s')
	{
		if ($this->updated_at === null) {
			return null;
		}



		try {
			$dt = new DateTime($this->updated_at);
		} catch (Exception $x) {
			throw new PropelException("Internally stored date/time/timestamp value could not be converted to DateTime: " . var_export($this->updated_at, true), $x);
		}

		if ($format === null) {
			// Because propel.useDateTimeClass is TRUE, we return a DateTime object.
			return $dt;
		} elseif (strpos($format, '%') !== false) {
			return strftime($format, $dt->format('U'));
		} else {
			return $dt->format($format);
		}
	}

	/**
	 * Set the value of [id] column.
	 * 
	 * @param      int $v new value
	 * @return     EtvaServer The current object (for fluent API support)
	 */
	public function setId($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->id !== $v) {
			$this->id = $v;
			$this->modifiedColumns[] = EtvaServerPeer::ID;
		}

		return $this;
	} // setId()

	/**
	 * Set the value of [logicalvolume_id] column.
	 * 
	 * @param      int $v new value
	 * @return     EtvaServer The current object (for fluent API support)
	 */
	public function setLogicalvolumeId($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->logicalvolume_id !== $v) {
			$this->logicalvolume_id = $v;
			$this->modifiedColumns[] = EtvaServerPeer::LOGICALVOLUME_ID;
		}

		if ($this->aEtvaLogicalvolume !== null && $this->aEtvaLogicalvolume->getId() !== $v) {
			$this->aEtvaLogicalvolume = null;
		}

		return $this;
	} // setLogicalvolumeId()

	/**
	 * Set the value of [node_id] column.
	 * 
	 * @param      int $v new value
	 * @return     EtvaServer The current object (for fluent API support)
	 */
	public function setNodeId($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->node_id !== $v) {
			$this->node_id = $v;
			$this->modifiedColumns[] = EtvaServerPeer::NODE_ID;
		}

		if ($this->aEtvaNode !== null && $this->aEtvaNode->getId() !== $v) {
			$this->aEtvaNode = null;
		}

		return $this;
	} // setNodeId()

	/**
	 * Set the value of [name] column.
	 * 
	 * @param      string $v new value
	 * @return     EtvaServer The current object (for fluent API support)
	 */
	public function setName($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->name !== $v) {
			$this->name = $v;
			$this->modifiedColumns[] = EtvaServerPeer::NAME;
		}

		return $this;
	} // setName()

	/**
	 * Set the value of [description] column.
	 * 
	 * @param      string $v new value
	 * @return     EtvaServer The current object (for fluent API support)
	 */
	public function setDescription($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->description !== $v) {
			$this->description = $v;
			$this->modifiedColumns[] = EtvaServerPeer::DESCRIPTION;
		}

		return $this;
	} // setDescription()

	/**
	 * Set the value of [ip] column.
	 * 
	 * @param      string $v new value
	 * @return     EtvaServer The current object (for fluent API support)
	 */
	public function setIp($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->ip !== $v) {
			$this->ip = $v;
			$this->modifiedColumns[] = EtvaServerPeer::IP;
		}

		return $this;
	} // setIp()

	/**
	 * Set the value of [vnc_port] column.
	 * 
	 * @param      int $v new value
	 * @return     EtvaServer The current object (for fluent API support)
	 */
	public function setVncPort($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->vnc_port !== $v) {
			$this->vnc_port = $v;
			$this->modifiedColumns[] = EtvaServerPeer::VNC_PORT;
		}

		return $this;
	} // setVncPort()

	/**
	 * Set the value of [agent_port] column.
	 * 
	 * @param      int $v new value
	 * @return     EtvaServer The current object (for fluent API support)
	 */
	public function setAgentPort($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->agent_port !== $v) {
			$this->agent_port = $v;
			$this->modifiedColumns[] = EtvaServerPeer::AGENT_PORT;
		}

		return $this;
	} // setAgentPort()

	/**
	 * Set the value of [agent_tmpl] column.
	 * 
	 * @param      string $v new value
	 * @return     EtvaServer The current object (for fluent API support)
	 */
	public function setAgentTmpl($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->agent_tmpl !== $v) {
			$this->agent_tmpl = $v;
			$this->modifiedColumns[] = EtvaServerPeer::AGENT_TMPL;
		}

		return $this;
	} // setAgentTmpl()

	/**
	 * Set the value of [uid] column.
	 * 
	 * @param      string $v new value
	 * @return     EtvaServer The current object (for fluent API support)
	 */
	public function setUid($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->uid !== $v) {
			$this->uid = $v;
			$this->modifiedColumns[] = EtvaServerPeer::UID;
		}

		return $this;
	} // setUid()

	/**
	 * Set the value of [mem] column.
	 * 
	 * @param      string $v new value
	 * @return     EtvaServer The current object (for fluent API support)
	 */
	public function setMem($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->mem !== $v) {
			$this->mem = $v;
			$this->modifiedColumns[] = EtvaServerPeer::MEM;
		}

		return $this;
	} // setMem()

	/**
	 * Set the value of [vcpu] column.
	 * 
	 * @param      int $v new value
	 * @return     EtvaServer The current object (for fluent API support)
	 */
	public function setVcpu($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->vcpu !== $v) {
			$this->vcpu = $v;
			$this->modifiedColumns[] = EtvaServerPeer::VCPU;
		}

		return $this;
	} // setVcpu()

	/**
	 * Set the value of [cpuset] column.
	 * 
	 * @param      string $v new value
	 * @return     EtvaServer The current object (for fluent API support)
	 */
	public function setCpuset($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->cpuset !== $v) {
			$this->cpuset = $v;
			$this->modifiedColumns[] = EtvaServerPeer::CPUSET;
		}

		return $this;
	} // setCpuset()

	/**
	 * Set the value of [location] column.
	 * 
	 * @param      string $v new value
	 * @return     EtvaServer The current object (for fluent API support)
	 */
	public function setLocation($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->location !== $v) {
			$this->location = $v;
			$this->modifiedColumns[] = EtvaServerPeer::LOCATION;
		}

		return $this;
	} // setLocation()

	/**
	 * Set the value of [network_cards] column.
	 * 
	 * @param      int $v new value
	 * @return     EtvaServer The current object (for fluent API support)
	 */
	public function setNetworkCards($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->network_cards !== $v) {
			$this->network_cards = $v;
			$this->modifiedColumns[] = EtvaServerPeer::NETWORK_CARDS;
		}

		return $this;
	} // setNetworkCards()

	/**
	 * Set the value of [state] column.
	 * 
	 * @param      string $v new value
	 * @return     EtvaServer The current object (for fluent API support)
	 */
	public function setState($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->state !== $v) {
			$this->state = $v;
			$this->modifiedColumns[] = EtvaServerPeer::STATE;
		}

		return $this;
	} // setState()

	/**
	 * Set the value of [mac_addresses] column.
	 * 
	 * @param      string $v new value
	 * @return     EtvaServer The current object (for fluent API support)
	 */
	public function setMacAddresses($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->mac_addresses !== $v) {
			$this->mac_addresses = $v;
			$this->modifiedColumns[] = EtvaServerPeer::MAC_ADDRESSES;
		}

		return $this;
	} // setMacAddresses()

	/**
	 * Set the value of [sf_guard_group_id] column.
	 * 
	 * @param      int $v new value
	 * @return     EtvaServer The current object (for fluent API support)
	 */
	public function setSfGuardGroupId($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->sf_guard_group_id !== $v) {
			$this->sf_guard_group_id = $v;
			$this->modifiedColumns[] = EtvaServerPeer::SF_GUARD_GROUP_ID;
		}

		if ($this->asfGuardGroup !== null && $this->asfGuardGroup->getId() !== $v) {
			$this->asfGuardGroup = null;
		}

		return $this;
	} // setSfGuardGroupId()

	/**
	 * Sets the value of [created_at] column to a normalized version of the date/time value specified.
	 * 
	 * @param      mixed $v string, integer (timestamp), or DateTime value.  Empty string will
	 *						be treated as NULL for temporal objects.
	 * @return     EtvaServer The current object (for fluent API support)
	 */
	public function setCreatedAt($v)
	{
		// we treat '' as NULL for temporal objects because DateTime('') == DateTime('now')
		// -- which is unexpected, to say the least.
		if ($v === null || $v === '') {
			$dt = null;
		} elseif ($v instanceof DateTime) {
			$dt = $v;
		} else {
			// some string/numeric value passed; we normalize that so that we can
			// validate it.
			try {
				if (is_numeric($v)) { // if it's a unix timestamp
					$dt = new DateTime('@'.$v, new DateTimeZone('UTC'));
					// We have to explicitly specify and then change the time zone because of a
					// DateTime bug: http://bugs.php.net/bug.php?id=43003
					$dt->setTimeZone(new DateTimeZone(date_default_timezone_get()));
				} else {
					$dt = new DateTime($v);
				}
			} catch (Exception $x) {
				throw new PropelException('Error parsing date/time value: ' . var_export($v, true), $x);
			}
		}

		if ( $this->created_at !== null || $dt !== null ) {
			// (nested ifs are a little easier to read in this case)

			$currNorm = ($this->created_at !== null && $tmpDt = new DateTime($this->created_at)) ? $tmpDt->format('Y-m-d\\TH:i:sO') : null;
			$newNorm = ($dt !== null) ? $dt->format('Y-m-d\\TH:i:sO') : null;

			if ( ($currNorm !== $newNorm) // normalized values don't match 
					)
			{
				$this->created_at = ($dt ? $dt->format('Y-m-d\\TH:i:sO') : null);
				$this->modifiedColumns[] = EtvaServerPeer::CREATED_AT;
			}
		} // if either are not null

		return $this;
	} // setCreatedAt()

	/**
	 * Sets the value of [updated_at] column to a normalized version of the date/time value specified.
	 * 
	 * @param      mixed $v string, integer (timestamp), or DateTime value.  Empty string will
	 *						be treated as NULL for temporal objects.
	 * @return     EtvaServer The current object (for fluent API support)
	 */
	public function setUpdatedAt($v)
	{
		// we treat '' as NULL for temporal objects because DateTime('') == DateTime('now')
		// -- which is unexpected, to say the least.
		if ($v === null || $v === '') {
			$dt = null;
		} elseif ($v instanceof DateTime) {
			$dt = $v;
		} else {
			// some string/numeric value passed; we normalize that so that we can
			// validate it.
			try {
				if (is_numeric($v)) { // if it's a unix timestamp
					$dt = new DateTime('@'.$v, new DateTimeZone('UTC'));
					// We have to explicitly specify and then change the time zone because of a
					// DateTime bug: http://bugs.php.net/bug.php?id=43003
					$dt->setTimeZone(new DateTimeZone(date_default_timezone_get()));
				} else {
					$dt = new DateTime($v);
				}
			} catch (Exception $x) {
				throw new PropelException('Error parsing date/time value: ' . var_export($v, true), $x);
			}
		}

		if ( $this->updated_at !== null || $dt !== null ) {
			// (nested ifs are a little easier to read in this case)

			$currNorm = ($this->updated_at !== null && $tmpDt = new DateTime($this->updated_at)) ? $tmpDt->format('Y-m-d\\TH:i:sO') : null;
			$newNorm = ($dt !== null) ? $dt->format('Y-m-d\\TH:i:sO') : null;

			if ( ($currNorm !== $newNorm) // normalized values don't match 
					)
			{
				$this->updated_at = ($dt ? $dt->format('Y-m-d\\TH:i:sO') : null);
				$this->modifiedColumns[] = EtvaServerPeer::UPDATED_AT;
			}
		} // if either are not null

		return $this;
	} // setUpdatedAt()

	/**
	 * Indicates whether the columns in this object are only set to default values.
	 *
	 * This method can be used in conjunction with isModified() to indicate whether an object is both
	 * modified _and_ has some values set which are non-default.
	 *
	 * @return     boolean Whether the columns in this object are only been set with default values.
	 */
	public function hasOnlyDefaultValues()
	{
			// First, ensure that we don't have any columns that have been modified which aren't default columns.
			if (array_diff($this->modifiedColumns, array())) {
				return false;
			}

		// otherwise, everything was equal, so return TRUE
		return true;
	} // hasOnlyDefaultValues()

	/**
	 * Hydrates (populates) the object variables with values from the database resultset.
	 *
	 * An offset (0-based "start column") is specified so that objects can be hydrated
	 * with a subset of the columns in the resultset rows.  This is needed, for example,
	 * for results of JOIN queries where the resultset row includes columns from two or
	 * more tables.
	 *
	 * @param      array $row The row returned by PDOStatement->fetch(PDO::FETCH_NUM)
	 * @param      int $startcol 0-based offset column which indicates which restultset column to start with.
	 * @param      boolean $rehydrate Whether this object is being re-hydrated from the database.
	 * @return     int next starting column
	 * @throws     PropelException  - Any caught Exception will be rewrapped as a PropelException.
	 */
	public function hydrate($row, $startcol = 0, $rehydrate = false)
	{
		try {

			$this->id = ($row[$startcol + 0] !== null) ? (int) $row[$startcol + 0] : null;
			$this->logicalvolume_id = ($row[$startcol + 1] !== null) ? (int) $row[$startcol + 1] : null;
			$this->node_id = ($row[$startcol + 2] !== null) ? (int) $row[$startcol + 2] : null;
			$this->name = ($row[$startcol + 3] !== null) ? (string) $row[$startcol + 3] : null;
			$this->description = ($row[$startcol + 4] !== null) ? (string) $row[$startcol + 4] : null;
			$this->ip = ($row[$startcol + 5] !== null) ? (string) $row[$startcol + 5] : null;
			$this->vnc_port = ($row[$startcol + 6] !== null) ? (int) $row[$startcol + 6] : null;
			$this->agent_port = ($row[$startcol + 7] !== null) ? (int) $row[$startcol + 7] : null;
			$this->agent_tmpl = ($row[$startcol + 8] !== null) ? (string) $row[$startcol + 8] : null;
			$this->uid = ($row[$startcol + 9] !== null) ? (string) $row[$startcol + 9] : null;
			$this->mem = ($row[$startcol + 10] !== null) ? (string) $row[$startcol + 10] : null;
			$this->vcpu = ($row[$startcol + 11] !== null) ? (int) $row[$startcol + 11] : null;
			$this->cpuset = ($row[$startcol + 12] !== null) ? (string) $row[$startcol + 12] : null;
			$this->location = ($row[$startcol + 13] !== null) ? (string) $row[$startcol + 13] : null;
			$this->network_cards = ($row[$startcol + 14] !== null) ? (int) $row[$startcol + 14] : null;
			$this->state = ($row[$startcol + 15] !== null) ? (string) $row[$startcol + 15] : null;
			$this->mac_addresses = ($row[$startcol + 16] !== null) ? (string) $row[$startcol + 16] : null;
			$this->sf_guard_group_id = ($row[$startcol + 17] !== null) ? (int) $row[$startcol + 17] : null;
			$this->created_at = ($row[$startcol + 18] !== null) ? (string) $row[$startcol + 18] : null;
			$this->updated_at = ($row[$startcol + 19] !== null) ? (string) $row[$startcol + 19] : null;
			$this->resetModified();

			$this->setNew(false);

			if ($rehydrate) {
				$this->ensureConsistency();
			}

			// FIXME - using NUM_COLUMNS may be clearer.
			return $startcol + 20; // 20 = EtvaServerPeer::NUM_COLUMNS - EtvaServerPeer::NUM_LAZY_LOAD_COLUMNS).

		} catch (Exception $e) {
			throw new PropelException("Error populating EtvaServer object", $e);
		}
	}

	/**
	 * Checks and repairs the internal consistency of the object.
	 *
	 * This method is executed after an already-instantiated object is re-hydrated
	 * from the database.  It exists to check any foreign keys to make sure that
	 * the objects related to the current object are correct based on foreign key.
	 *
	 * You can override this method in the stub class, but you should always invoke
	 * the base method from the overridden method (i.e. parent::ensureConsistency()),
	 * in case your model changes.
	 *
	 * @throws     PropelException
	 */
	public function ensureConsistency()
	{

		if ($this->aEtvaLogicalvolume !== null && $this->logicalvolume_id !== $this->aEtvaLogicalvolume->getId()) {
			$this->aEtvaLogicalvolume = null;
		}
		if ($this->aEtvaNode !== null && $this->node_id !== $this->aEtvaNode->getId()) {
			$this->aEtvaNode = null;
		}
		if ($this->asfGuardGroup !== null && $this->sf_guard_group_id !== $this->asfGuardGroup->getId()) {
			$this->asfGuardGroup = null;
		}
	} // ensureConsistency

	/**
	 * Reloads this object from datastore based on primary key and (optionally) resets all associated objects.
	 *
	 * This will only work if the object has been saved and has a valid primary key set.
	 *
	 * @param      boolean $deep (optional) Whether to also de-associated any related objects.
	 * @param      PropelPDO $con (optional) The PropelPDO connection to use.
	 * @return     void
	 * @throws     PropelException - if this object is deleted, unsaved or doesn't have pk match in db
	 */
	public function reload($deep = false, PropelPDO $con = null)
	{
		if ($this->isDeleted()) {
			throw new PropelException("Cannot reload a deleted object.");
		}

		if ($this->isNew()) {
			throw new PropelException("Cannot reload an unsaved object.");
		}

		if ($con === null) {
			$con = Propel::getConnection(EtvaServerPeer::DATABASE_NAME, Propel::CONNECTION_READ);
		}

		// We don't need to alter the object instance pool; we're just modifying this instance
		// already in the pool.

		$stmt = EtvaServerPeer::doSelectStmt($this->buildPkeyCriteria(), $con);
		$row = $stmt->fetch(PDO::FETCH_NUM);
		$stmt->closeCursor();
		if (!$row) {
			throw new PropelException('Cannot find matching row in the database to reload object values.');
		}
		$this->hydrate($row, 0, true); // rehydrate

		if ($deep) {  // also de-associate any related objects?

			$this->aEtvaLogicalvolume = null;
			$this->aEtvaNode = null;
			$this->asfGuardGroup = null;
			$this->collEtvaAgents = null;
			$this->lastEtvaAgentCriteria = null;

			$this->collEtvaNetworks = null;
			$this->lastEtvaNetworkCriteria = null;

			$this->collEtvaServices = null;
			$this->lastEtvaServiceCriteria = null;

		} // if (deep)
	}

	/**
	 * Removes this object from datastore and sets delete attribute.
	 *
	 * @param      PropelPDO $con
	 * @return     void
	 * @throws     PropelException
	 * @see        BaseObject::setDeleted()
	 * @see        BaseObject::isDeleted()
	 */
	public function delete(PropelPDO $con = null)
	{

    foreach (sfMixer::getCallables('BaseEtvaServer:delete:pre') as $callable)
    {
      $ret = call_user_func($callable, $this, $con);
      if ($ret)
      {
        return;
      }
    }


		if ($this->isDeleted()) {
			throw new PropelException("This object has already been deleted.");
		}

		if ($con === null) {
			$con = Propel::getConnection(EtvaServerPeer::DATABASE_NAME, Propel::CONNECTION_WRITE);
		}
		
		$con->beginTransaction();
		try {
			EtvaServerPeer::doDelete($this, $con);
			$this->setDeleted(true);
			$con->commit();
		} catch (PropelException $e) {
			$con->rollBack();
			throw $e;
		}
	

    foreach (sfMixer::getCallables('BaseEtvaServer:delete:post') as $callable)
    {
      call_user_func($callable, $this, $con);
    }

  }
	/**
	 * Persists this object to the database.
	 *
	 * If the object is new, it inserts it; otherwise an update is performed.
	 * All modified related objects will also be persisted in the doSave()
	 * method.  This method wraps all precipitate database operations in a
	 * single transaction.
	 *
	 * @param      PropelPDO $con
	 * @return     int The number of rows affected by this insert/update and any referring fk objects' save() operations.
	 * @throws     PropelException
	 * @see        doSave()
	 */
	public function save(PropelPDO $con = null)
	{

    foreach (sfMixer::getCallables('BaseEtvaServer:save:pre') as $callable)
    {
      $affectedRows = call_user_func($callable, $this, $con);
      if (is_int($affectedRows))
      {
        return $affectedRows;
      }
    }


    if ($this->isNew() && !$this->isColumnModified(EtvaServerPeer::CREATED_AT))
    {
      $this->setCreatedAt(time());
    }

    if ($this->isModified() && !$this->isColumnModified(EtvaServerPeer::UPDATED_AT))
    {
      $this->setUpdatedAt(time());
    }

		if ($this->isDeleted()) {
			throw new PropelException("You cannot save an object that has been deleted.");
		}

		if ($con === null) {
			$con = Propel::getConnection(EtvaServerPeer::DATABASE_NAME, Propel::CONNECTION_WRITE);
		}
		
		$con->beginTransaction();
		try {
			$affectedRows = $this->doSave($con);
			$con->commit();
    foreach (sfMixer::getCallables('BaseEtvaServer:save:post') as $callable)
    {
      call_user_func($callable, $this, $con, $affectedRows);
    }

			EtvaServerPeer::addInstanceToPool($this);
			return $affectedRows;
		} catch (PropelException $e) {
			$con->rollBack();
			throw $e;
		}
	}

	/**
	 * Performs the work of inserting or updating the row in the database.
	 *
	 * If the object is new, it inserts it; otherwise an update is performed.
	 * All related objects are also updated in this method.
	 *
	 * @param      PropelPDO $con
	 * @return     int The number of rows affected by this insert/update and any referring fk objects' save() operations.
	 * @throws     PropelException
	 * @see        save()
	 */
	protected function doSave(PropelPDO $con)
	{
		$affectedRows = 0; // initialize var to track total num of affected rows
		if (!$this->alreadyInSave) {
			$this->alreadyInSave = true;

			// We call the save method on the following object(s) if they
			// were passed to this object by their coresponding set
			// method.  This object relates to these object(s) by a
			// foreign key reference.

			if ($this->aEtvaLogicalvolume !== null) {
				if ($this->aEtvaLogicalvolume->isModified() || $this->aEtvaLogicalvolume->isNew()) {
					$affectedRows += $this->aEtvaLogicalvolume->save($con);
				}
				$this->setEtvaLogicalvolume($this->aEtvaLogicalvolume);
			}

			if ($this->aEtvaNode !== null) {
				if ($this->aEtvaNode->isModified() || $this->aEtvaNode->isNew()) {
					$affectedRows += $this->aEtvaNode->save($con);
				}
				$this->setEtvaNode($this->aEtvaNode);
			}

			if ($this->asfGuardGroup !== null) {
				if ($this->asfGuardGroup->isModified() || $this->asfGuardGroup->isNew()) {
					$affectedRows += $this->asfGuardGroup->save($con);
				}
				$this->setsfGuardGroup($this->asfGuardGroup);
			}

			if ($this->isNew() ) {
				$this->modifiedColumns[] = EtvaServerPeer::ID;
			}

			// If this object has been modified, then save it to the database.
			if ($this->isModified()) {
				if ($this->isNew()) {
					$pk = EtvaServerPeer::doInsert($this, $con);
					$affectedRows += 1; // we are assuming that there is only 1 row per doInsert() which
										 // should always be true here (even though technically
										 // BasePeer::doInsert() can insert multiple rows).

					$this->setId($pk);  //[IMV] update autoincrement primary key

					$this->setNew(false);
				} else {
					$affectedRows += EtvaServerPeer::doUpdate($this, $con);
				}

				$this->resetModified(); // [HL] After being saved an object is no longer 'modified'
			}

			if ($this->collEtvaAgents !== null) {
				foreach ($this->collEtvaAgents as $referrerFK) {
					if (!$referrerFK->isDeleted()) {
						$affectedRows += $referrerFK->save($con);
					}
				}
			}

			if ($this->collEtvaNetworks !== null) {
				foreach ($this->collEtvaNetworks as $referrerFK) {
					if (!$referrerFK->isDeleted()) {
						$affectedRows += $referrerFK->save($con);
					}
				}
			}

			if ($this->collEtvaServices !== null) {
				foreach ($this->collEtvaServices as $referrerFK) {
					if (!$referrerFK->isDeleted()) {
						$affectedRows += $referrerFK->save($con);
					}
				}
			}

			$this->alreadyInSave = false;

		}
		return $affectedRows;
	} // doSave()

	/**
	 * Array of ValidationFailed objects.
	 * @var        array ValidationFailed[]
	 */
	protected $validationFailures = array();

	/**
	 * Gets any ValidationFailed objects that resulted from last call to validate().
	 *
	 *
	 * @return     array ValidationFailed[]
	 * @see        validate()
	 */
	public function getValidationFailures()
	{
		return $this->validationFailures;
	}

	/**
	 * Validates the objects modified field values and all objects related to this table.
	 *
	 * If $columns is either a column name or an array of column names
	 * only those columns are validated.
	 *
	 * @param      mixed $columns Column name or an array of column names.
	 * @return     boolean Whether all columns pass validation.
	 * @see        doValidate()
	 * @see        getValidationFailures()
	 */
	public function validate($columns = null)
	{
		$res = $this->doValidate($columns);
		if ($res === true) {
			$this->validationFailures = array();
			return true;
		} else {
			$this->validationFailures = $res;
			return false;
		}
	}

	/**
	 * This function performs the validation work for complex object models.
	 *
	 * In addition to checking the current object, all related objects will
	 * also be validated.  If all pass then <code>true</code> is returned; otherwise
	 * an aggreagated array of ValidationFailed objects will be returned.
	 *
	 * @param      array $columns Array of column names to validate.
	 * @return     mixed <code>true</code> if all validations pass; array of <code>ValidationFailed</code> objets otherwise.
	 */
	protected function doValidate($columns = null)
	{
		if (!$this->alreadyInValidation) {
			$this->alreadyInValidation = true;
			$retval = null;

			$failureMap = array();


			// We call the validate method on the following object(s) if they
			// were passed to this object by their coresponding set
			// method.  This object relates to these object(s) by a
			// foreign key reference.

			if ($this->aEtvaLogicalvolume !== null) {
				if (!$this->aEtvaLogicalvolume->validate($columns)) {
					$failureMap = array_merge($failureMap, $this->aEtvaLogicalvolume->getValidationFailures());
				}
			}

			if ($this->aEtvaNode !== null) {
				if (!$this->aEtvaNode->validate($columns)) {
					$failureMap = array_merge($failureMap, $this->aEtvaNode->getValidationFailures());
				}
			}

			if ($this->asfGuardGroup !== null) {
				if (!$this->asfGuardGroup->validate($columns)) {
					$failureMap = array_merge($failureMap, $this->asfGuardGroup->getValidationFailures());
				}
			}


			if (($retval = EtvaServerPeer::doValidate($this, $columns)) !== true) {
				$failureMap = array_merge($failureMap, $retval);
			}


				if ($this->collEtvaAgents !== null) {
					foreach ($this->collEtvaAgents as $referrerFK) {
						if (!$referrerFK->validate($columns)) {
							$failureMap = array_merge($failureMap, $referrerFK->getValidationFailures());
						}
					}
				}

				if ($this->collEtvaNetworks !== null) {
					foreach ($this->collEtvaNetworks as $referrerFK) {
						if (!$referrerFK->validate($columns)) {
							$failureMap = array_merge($failureMap, $referrerFK->getValidationFailures());
						}
					}
				}

				if ($this->collEtvaServices !== null) {
					foreach ($this->collEtvaServices as $referrerFK) {
						if (!$referrerFK->validate($columns)) {
							$failureMap = array_merge($failureMap, $referrerFK->getValidationFailures());
						}
					}
				}


			$this->alreadyInValidation = false;
		}

		return (!empty($failureMap) ? $failureMap : true);
	}

	/**
	 * Retrieves a field from the object by name passed in as a string.
	 *
	 * @param      string $name name
	 * @param      string $type The type of fieldname the $name is of:
	 *                     one of the class type constants BasePeer::TYPE_PHPNAME, BasePeer::TYPE_STUDLYPHPNAME
	 *                     BasePeer::TYPE_COLNAME, BasePeer::TYPE_FIELDNAME, BasePeer::TYPE_NUM
	 * @return     mixed Value of field.
	 */
	public function getByName($name, $type = BasePeer::TYPE_PHPNAME)
	{
		$pos = EtvaServerPeer::translateFieldName($name, $type, BasePeer::TYPE_NUM);
		$field = $this->getByPosition($pos);
		return $field;
	}

	/**
	 * Retrieves a field from the object by Position as specified in the xml schema.
	 * Zero-based.
	 *
	 * @param      int $pos position in xml schema
	 * @return     mixed Value of field at $pos
	 */
	public function getByPosition($pos)
	{
		switch($pos) {
			case 0:
				return $this->getId();
				break;
			case 1:
				return $this->getLogicalvolumeId();
				break;
			case 2:
				return $this->getNodeId();
				break;
			case 3:
				return $this->getName();
				break;
			case 4:
				return $this->getDescription();
				break;
			case 5:
				return $this->getIp();
				break;
			case 6:
				return $this->getVncPort();
				break;
			case 7:
				return $this->getAgentPort();
				break;
			case 8:
				return $this->getAgentTmpl();
				break;
			case 9:
				return $this->getUid();
				break;
			case 10:
				return $this->getMem();
				break;
			case 11:
				return $this->getVcpu();
				break;
			case 12:
				return $this->getCpuset();
				break;
			case 13:
				return $this->getLocation();
				break;
			case 14:
				return $this->getNetworkCards();
				break;
			case 15:
				return $this->getState();
				break;
			case 16:
				return $this->getMacAddresses();
				break;
			case 17:
				return $this->getSfGuardGroupId();
				break;
			case 18:
				return $this->getCreatedAt();
				break;
			case 19:
				return $this->getUpdatedAt();
				break;
			default:
				return null;
				break;
		} // switch()
	}

	/**
	 * Exports the object as an array.
	 *
	 * You can specify the key type of the array by passing one of the class
	 * type constants.
	 *
	 * @param      string $keyType (optional) One of the class type constants BasePeer::TYPE_PHPNAME, BasePeer::TYPE_STUDLYPHPNAME
	 *                        BasePeer::TYPE_COLNAME, BasePeer::TYPE_FIELDNAME, BasePeer::TYPE_NUM. Defaults to BasePeer::TYPE_PHPNAME.
	 * @param      boolean $includeLazyLoadColumns (optional) Whether to include lazy loaded columns.  Defaults to TRUE.
	 * @return     an associative array containing the field names (as keys) and field values
	 */
	public function toArray($keyType = BasePeer::TYPE_PHPNAME, $includeLazyLoadColumns = true)
	{
		$keys = EtvaServerPeer::getFieldNames($keyType);
		$result = array(
			$keys[0] => $this->getId(),
			$keys[1] => $this->getLogicalvolumeId(),
			$keys[2] => $this->getNodeId(),
			$keys[3] => $this->getName(),
			$keys[4] => $this->getDescription(),
			$keys[5] => $this->getIp(),
			$keys[6] => $this->getVncPort(),
			$keys[7] => $this->getAgentPort(),
			$keys[8] => $this->getAgentTmpl(),
			$keys[9] => $this->getUid(),
			$keys[10] => $this->getMem(),
			$keys[11] => $this->getVcpu(),
			$keys[12] => $this->getCpuset(),
			$keys[13] => $this->getLocation(),
			$keys[14] => $this->getNetworkCards(),
			$keys[15] => $this->getState(),
			$keys[16] => $this->getMacAddresses(),
			$keys[17] => $this->getSfGuardGroupId(),
			$keys[18] => $this->getCreatedAt(),
			$keys[19] => $this->getUpdatedAt(),
		);
		return $result;
	}

	/**
	 * Sets a field from the object by name passed in as a string.
	 *
	 * @param      string $name peer name
	 * @param      mixed $value field value
	 * @param      string $type The type of fieldname the $name is of:
	 *                     one of the class type constants BasePeer::TYPE_PHPNAME, BasePeer::TYPE_STUDLYPHPNAME
	 *                     BasePeer::TYPE_COLNAME, BasePeer::TYPE_FIELDNAME, BasePeer::TYPE_NUM
	 * @return     void
	 */
	public function setByName($name, $value, $type = BasePeer::TYPE_PHPNAME)
	{
		$pos = EtvaServerPeer::translateFieldName($name, $type, BasePeer::TYPE_NUM);
		return $this->setByPosition($pos, $value);
	}

	/**
	 * Sets a field from the object by Position as specified in the xml schema.
	 * Zero-based.
	 *
	 * @param      int $pos position in xml schema
	 * @param      mixed $value field value
	 * @return     void
	 */
	public function setByPosition($pos, $value)
	{
		switch($pos) {
			case 0:
				$this->setId($value);
				break;
			case 1:
				$this->setLogicalvolumeId($value);
				break;
			case 2:
				$this->setNodeId($value);
				break;
			case 3:
				$this->setName($value);
				break;
			case 4:
				$this->setDescription($value);
				break;
			case 5:
				$this->setIp($value);
				break;
			case 6:
				$this->setVncPort($value);
				break;
			case 7:
				$this->setAgentPort($value);
				break;
			case 8:
				$this->setAgentTmpl($value);
				break;
			case 9:
				$this->setUid($value);
				break;
			case 10:
				$this->setMem($value);
				break;
			case 11:
				$this->setVcpu($value);
				break;
			case 12:
				$this->setCpuset($value);
				break;
			case 13:
				$this->setLocation($value);
				break;
			case 14:
				$this->setNetworkCards($value);
				break;
			case 15:
				$this->setState($value);
				break;
			case 16:
				$this->setMacAddresses($value);
				break;
			case 17:
				$this->setSfGuardGroupId($value);
				break;
			case 18:
				$this->setCreatedAt($value);
				break;
			case 19:
				$this->setUpdatedAt($value);
				break;
		} // switch()
	}

	/**
	 * Populates the object using an array.
	 *
	 * This is particularly useful when populating an object from one of the
	 * request arrays (e.g. $_POST).  This method goes through the column
	 * names, checking to see whether a matching key exists in populated
	 * array. If so the setByName() method is called for that column.
	 *
	 * You can specify the key type of the array by additionally passing one
	 * of the class type constants BasePeer::TYPE_PHPNAME, BasePeer::TYPE_STUDLYPHPNAME,
	 * BasePeer::TYPE_COLNAME, BasePeer::TYPE_FIELDNAME, BasePeer::TYPE_NUM.
	 * The default key type is the column's phpname (e.g. 'AuthorId')
	 *
	 * @param      array  $arr     An array to populate the object from.
	 * @param      string $keyType The type of keys the array uses.
	 * @return     void
	 */
	public function fromArray($arr, $keyType = BasePeer::TYPE_PHPNAME)
	{
		$keys = EtvaServerPeer::getFieldNames($keyType);

		if (array_key_exists($keys[0], $arr)) $this->setId($arr[$keys[0]]);
		if (array_key_exists($keys[1], $arr)) $this->setLogicalvolumeId($arr[$keys[1]]);
		if (array_key_exists($keys[2], $arr)) $this->setNodeId($arr[$keys[2]]);
		if (array_key_exists($keys[3], $arr)) $this->setName($arr[$keys[3]]);
		if (array_key_exists($keys[4], $arr)) $this->setDescription($arr[$keys[4]]);
		if (array_key_exists($keys[5], $arr)) $this->setIp($arr[$keys[5]]);
		if (array_key_exists($keys[6], $arr)) $this->setVncPort($arr[$keys[6]]);
		if (array_key_exists($keys[7], $arr)) $this->setAgentPort($arr[$keys[7]]);
		if (array_key_exists($keys[8], $arr)) $this->setAgentTmpl($arr[$keys[8]]);
		if (array_key_exists($keys[9], $arr)) $this->setUid($arr[$keys[9]]);
		if (array_key_exists($keys[10], $arr)) $this->setMem($arr[$keys[10]]);
		if (array_key_exists($keys[11], $arr)) $this->setVcpu($arr[$keys[11]]);
		if (array_key_exists($keys[12], $arr)) $this->setCpuset($arr[$keys[12]]);
		if (array_key_exists($keys[13], $arr)) $this->setLocation($arr[$keys[13]]);
		if (array_key_exists($keys[14], $arr)) $this->setNetworkCards($arr[$keys[14]]);
		if (array_key_exists($keys[15], $arr)) $this->setState($arr[$keys[15]]);
		if (array_key_exists($keys[16], $arr)) $this->setMacAddresses($arr[$keys[16]]);
		if (array_key_exists($keys[17], $arr)) $this->setSfGuardGroupId($arr[$keys[17]]);
		if (array_key_exists($keys[18], $arr)) $this->setCreatedAt($arr[$keys[18]]);
		if (array_key_exists($keys[19], $arr)) $this->setUpdatedAt($arr[$keys[19]]);
	}

	/**
	 * Build a Criteria object containing the values of all modified columns in this object.
	 *
	 * @return     Criteria The Criteria object containing all modified values.
	 */
	public function buildCriteria()
	{
		$criteria = new Criteria(EtvaServerPeer::DATABASE_NAME);

		if ($this->isColumnModified(EtvaServerPeer::ID)) $criteria->add(EtvaServerPeer::ID, $this->id);
		if ($this->isColumnModified(EtvaServerPeer::LOGICALVOLUME_ID)) $criteria->add(EtvaServerPeer::LOGICALVOLUME_ID, $this->logicalvolume_id);
		if ($this->isColumnModified(EtvaServerPeer::NODE_ID)) $criteria->add(EtvaServerPeer::NODE_ID, $this->node_id);
		if ($this->isColumnModified(EtvaServerPeer::NAME)) $criteria->add(EtvaServerPeer::NAME, $this->name);
		if ($this->isColumnModified(EtvaServerPeer::DESCRIPTION)) $criteria->add(EtvaServerPeer::DESCRIPTION, $this->description);
		if ($this->isColumnModified(EtvaServerPeer::IP)) $criteria->add(EtvaServerPeer::IP, $this->ip);
		if ($this->isColumnModified(EtvaServerPeer::VNC_PORT)) $criteria->add(EtvaServerPeer::VNC_PORT, $this->vnc_port);
		if ($this->isColumnModified(EtvaServerPeer::AGENT_PORT)) $criteria->add(EtvaServerPeer::AGENT_PORT, $this->agent_port);
		if ($this->isColumnModified(EtvaServerPeer::AGENT_TMPL)) $criteria->add(EtvaServerPeer::AGENT_TMPL, $this->agent_tmpl);
		if ($this->isColumnModified(EtvaServerPeer::UID)) $criteria->add(EtvaServerPeer::UID, $this->uid);
		if ($this->isColumnModified(EtvaServerPeer::MEM)) $criteria->add(EtvaServerPeer::MEM, $this->mem);
		if ($this->isColumnModified(EtvaServerPeer::VCPU)) $criteria->add(EtvaServerPeer::VCPU, $this->vcpu);
		if ($this->isColumnModified(EtvaServerPeer::CPUSET)) $criteria->add(EtvaServerPeer::CPUSET, $this->cpuset);
		if ($this->isColumnModified(EtvaServerPeer::LOCATION)) $criteria->add(EtvaServerPeer::LOCATION, $this->location);
		if ($this->isColumnModified(EtvaServerPeer::NETWORK_CARDS)) $criteria->add(EtvaServerPeer::NETWORK_CARDS, $this->network_cards);
		if ($this->isColumnModified(EtvaServerPeer::STATE)) $criteria->add(EtvaServerPeer::STATE, $this->state);
		if ($this->isColumnModified(EtvaServerPeer::MAC_ADDRESSES)) $criteria->add(EtvaServerPeer::MAC_ADDRESSES, $this->mac_addresses);
		if ($this->isColumnModified(EtvaServerPeer::SF_GUARD_GROUP_ID)) $criteria->add(EtvaServerPeer::SF_GUARD_GROUP_ID, $this->sf_guard_group_id);
		if ($this->isColumnModified(EtvaServerPeer::CREATED_AT)) $criteria->add(EtvaServerPeer::CREATED_AT, $this->created_at);
		if ($this->isColumnModified(EtvaServerPeer::UPDATED_AT)) $criteria->add(EtvaServerPeer::UPDATED_AT, $this->updated_at);

		return $criteria;
	}

	/**
	 * Builds a Criteria object containing the primary key for this object.
	 *
	 * Unlike buildCriteria() this method includes the primary key values regardless
	 * of whether or not they have been modified.
	 *
	 * @return     Criteria The Criteria object containing value(s) for primary key(s).
	 */
	public function buildPkeyCriteria()
	{
		$criteria = new Criteria(EtvaServerPeer::DATABASE_NAME);

		$criteria->add(EtvaServerPeer::ID, $this->id);

		return $criteria;
	}

	/**
	 * Returns the primary key for this object (row).
	 * @return     int
	 */
	public function getPrimaryKey()
	{
		return $this->getId();
	}

	/**
	 * Generic method to set the primary key (id column).
	 *
	 * @param      int $key Primary key.
	 * @return     void
	 */
	public function setPrimaryKey($key)
	{
		$this->setId($key);
	}

	/**
	 * Sets contents of passed object to values from current object.
	 *
	 * If desired, this method can also make copies of all associated (fkey referrers)
	 * objects.
	 *
	 * @param      object $copyObj An object of EtvaServer (or compatible) type.
	 * @param      boolean $deepCopy Whether to also copy all rows that refer (by fkey) to the current row.
	 * @throws     PropelException
	 */
	public function copyInto($copyObj, $deepCopy = false)
	{

		$copyObj->setLogicalvolumeId($this->logicalvolume_id);

		$copyObj->setNodeId($this->node_id);

		$copyObj->setName($this->name);

		$copyObj->setDescription($this->description);

		$copyObj->setIp($this->ip);

		$copyObj->setVncPort($this->vnc_port);

		$copyObj->setAgentPort($this->agent_port);

		$copyObj->setAgentTmpl($this->agent_tmpl);

		$copyObj->setUid($this->uid);

		$copyObj->setMem($this->mem);

		$copyObj->setVcpu($this->vcpu);

		$copyObj->setCpuset($this->cpuset);

		$copyObj->setLocation($this->location);

		$copyObj->setNetworkCards($this->network_cards);

		$copyObj->setState($this->state);

		$copyObj->setMacAddresses($this->mac_addresses);

		$copyObj->setSfGuardGroupId($this->sf_guard_group_id);

		$copyObj->setCreatedAt($this->created_at);

		$copyObj->setUpdatedAt($this->updated_at);


		if ($deepCopy) {
			// important: temporarily setNew(false) because this affects the behavior of
			// the getter/setter methods for fkey referrer objects.
			$copyObj->setNew(false);

			foreach ($this->getEtvaAgents() as $relObj) {
				if ($relObj !== $this) {  // ensure that we don't try to copy a reference to ourselves
					$copyObj->addEtvaAgent($relObj->copy($deepCopy));
				}
			}

			foreach ($this->getEtvaNetworks() as $relObj) {
				if ($relObj !== $this) {  // ensure that we don't try to copy a reference to ourselves
					$copyObj->addEtvaNetwork($relObj->copy($deepCopy));
				}
			}

			foreach ($this->getEtvaServices() as $relObj) {
				if ($relObj !== $this) {  // ensure that we don't try to copy a reference to ourselves
					$copyObj->addEtvaService($relObj->copy($deepCopy));
				}
			}

		} // if ($deepCopy)


		$copyObj->setNew(true);

		$copyObj->setId(NULL); // this is a auto-increment column, so set to default value

	}

	/**
	 * Makes a copy of this object that will be inserted as a new row in table when saved.
	 * It creates a new object filling in the simple attributes, but skipping any primary
	 * keys that are defined for the table.
	 *
	 * If desired, this method can also make copies of all associated (fkey referrers)
	 * objects.
	 *
	 * @param      boolean $deepCopy Whether to also copy all rows that refer (by fkey) to the current row.
	 * @return     EtvaServer Clone of current object.
	 * @throws     PropelException
	 */
	public function copy($deepCopy = false)
	{
		// we use get_class(), because this might be a subclass
		$clazz = get_class($this);
		$copyObj = new $clazz();
		$this->copyInto($copyObj, $deepCopy);
		return $copyObj;
	}

	/**
	 * Returns a peer instance associated with this om.
	 *
	 * Since Peer classes are not to have any instance attributes, this method returns the
	 * same instance for all member of this class. The method could therefore
	 * be static, but this would prevent one from overriding the behavior.
	 *
	 * @return     EtvaServerPeer
	 */
	public function getPeer()
	{
		if (self::$peer === null) {
			self::$peer = new EtvaServerPeer();
		}
		return self::$peer;
	}

	/**
	 * Declares an association between this object and a EtvaLogicalvolume object.
	 *
	 * @param      EtvaLogicalvolume $v
	 * @return     EtvaServer The current object (for fluent API support)
	 * @throws     PropelException
	 */
	public function setEtvaLogicalvolume(EtvaLogicalvolume $v = null)
	{
		if ($v === null) {
			$this->setLogicalvolumeId(NULL);
		} else {
			$this->setLogicalvolumeId($v->getId());
		}

		$this->aEtvaLogicalvolume = $v;

		// Add binding for other direction of this n:n relationship.
		// If this object has already been added to the EtvaLogicalvolume object, it will not be re-added.
		if ($v !== null) {
			$v->addEtvaServer($this);
		}

		return $this;
	}


	/**
	 * Get the associated EtvaLogicalvolume object
	 *
	 * @param      PropelPDO Optional Connection object.
	 * @return     EtvaLogicalvolume The associated EtvaLogicalvolume object.
	 * @throws     PropelException
	 */
	public function getEtvaLogicalvolume(PropelPDO $con = null)
	{
		if ($this->aEtvaLogicalvolume === null && ($this->logicalvolume_id !== null)) {
			$c = new Criteria(EtvaLogicalvolumePeer::DATABASE_NAME);
			$c->add(EtvaLogicalvolumePeer::ID, $this->logicalvolume_id);
			$this->aEtvaLogicalvolume = EtvaLogicalvolumePeer::doSelectOne($c, $con);
			/* The following can be used additionally to
			   guarantee the related object contains a reference
			   to this object.  This level of coupling may, however, be
			   undesirable since it could result in an only partially populated collection
			   in the referenced object.
			   $this->aEtvaLogicalvolume->addEtvaServers($this);
			 */
		}
		return $this->aEtvaLogicalvolume;
	}

	/**
	 * Declares an association between this object and a EtvaNode object.
	 *
	 * @param      EtvaNode $v
	 * @return     EtvaServer The current object (for fluent API support)
	 * @throws     PropelException
	 */
	public function setEtvaNode(EtvaNode $v = null)
	{
		if ($v === null) {
			$this->setNodeId(NULL);
		} else {
			$this->setNodeId($v->getId());
		}

		$this->aEtvaNode = $v;

		// Add binding for other direction of this n:n relationship.
		// If this object has already been added to the EtvaNode object, it will not be re-added.
		if ($v !== null) {
			$v->addEtvaServer($this);
		}

		return $this;
	}


	/**
	 * Get the associated EtvaNode object
	 *
	 * @param      PropelPDO Optional Connection object.
	 * @return     EtvaNode The associated EtvaNode object.
	 * @throws     PropelException
	 */
	public function getEtvaNode(PropelPDO $con = null)
	{
		if ($this->aEtvaNode === null && ($this->node_id !== null)) {
			$c = new Criteria(EtvaNodePeer::DATABASE_NAME);
			$c->add(EtvaNodePeer::ID, $this->node_id);
			$this->aEtvaNode = EtvaNodePeer::doSelectOne($c, $con);
			/* The following can be used additionally to
			   guarantee the related object contains a reference
			   to this object.  This level of coupling may, however, be
			   undesirable since it could result in an only partially populated collection
			   in the referenced object.
			   $this->aEtvaNode->addEtvaServers($this);
			 */
		}
		return $this->aEtvaNode;
	}

	/**
	 * Declares an association between this object and a sfGuardGroup object.
	 *
	 * @param      sfGuardGroup $v
	 * @return     EtvaServer The current object (for fluent API support)
	 * @throws     PropelException
	 */
	public function setsfGuardGroup(sfGuardGroup $v = null)
	{
		if ($v === null) {
			$this->setSfGuardGroupId(NULL);
		} else {
			$this->setSfGuardGroupId($v->getId());
		}

		$this->asfGuardGroup = $v;

		// Add binding for other direction of this n:n relationship.
		// If this object has already been added to the sfGuardGroup object, it will not be re-added.
		if ($v !== null) {
			$v->addEtvaServer($this);
		}

		return $this;
	}


	/**
	 * Get the associated sfGuardGroup object
	 *
	 * @param      PropelPDO Optional Connection object.
	 * @return     sfGuardGroup The associated sfGuardGroup object.
	 * @throws     PropelException
	 */
	public function getsfGuardGroup(PropelPDO $con = null)
	{
		if ($this->asfGuardGroup === null && ($this->sf_guard_group_id !== null)) {
			$c = new Criteria(sfGuardGroupPeer::DATABASE_NAME);
			$c->add(sfGuardGroupPeer::ID, $this->sf_guard_group_id);
			$this->asfGuardGroup = sfGuardGroupPeer::doSelectOne($c, $con);
			/* The following can be used additionally to
			   guarantee the related object contains a reference
			   to this object.  This level of coupling may, however, be
			   undesirable since it could result in an only partially populated collection
			   in the referenced object.
			   $this->asfGuardGroup->addEtvaServers($this);
			 */
		}
		return $this->asfGuardGroup;
	}

	/**
	 * Clears out the collEtvaAgents collection (array).
	 *
	 * This does not modify the database; however, it will remove any associated objects, causing
	 * them to be refetched by subsequent calls to accessor method.
	 *
	 * @return     void
	 * @see        addEtvaAgents()
	 */
	public function clearEtvaAgents()
	{
		$this->collEtvaAgents = null; // important to set this to NULL since that means it is uninitialized
	}

	/**
	 * Initializes the collEtvaAgents collection (array).
	 *
	 * By default this just sets the collEtvaAgents collection to an empty array (like clearcollEtvaAgents());
	 * however, you may wish to override this method in your stub class to provide setting appropriate
	 * to your application -- for example, setting the initial array to the values stored in database.
	 *
	 * @return     void
	 */
	public function initEtvaAgents()
	{
		$this->collEtvaAgents = array();
	}

	/**
	 * Gets an array of EtvaAgent objects which contain a foreign key that references this object.
	 *
	 * If this collection has already been initialized with an identical Criteria, it returns the collection.
	 * Otherwise if this EtvaServer has previously been saved, it will retrieve
	 * related EtvaAgents from storage. If this EtvaServer is new, it will return
	 * an empty collection or the current collection, the criteria is ignored on a new object.
	 *
	 * @param      PropelPDO $con
	 * @param      Criteria $criteria
	 * @return     array EtvaAgent[]
	 * @throws     PropelException
	 */
	public function getEtvaAgents($criteria = null, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(EtvaServerPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collEtvaAgents === null) {
			if ($this->isNew()) {
			   $this->collEtvaAgents = array();
			} else {

				$criteria->add(EtvaAgentPeer::SERVER_ID, $this->id);

				EtvaAgentPeer::addSelectColumns($criteria);
				$this->collEtvaAgents = EtvaAgentPeer::doSelect($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return the collection.


				$criteria->add(EtvaAgentPeer::SERVER_ID, $this->id);

				EtvaAgentPeer::addSelectColumns($criteria);
				if (!isset($this->lastEtvaAgentCriteria) || !$this->lastEtvaAgentCriteria->equals($criteria)) {
					$this->collEtvaAgents = EtvaAgentPeer::doSelect($criteria, $con);
				}
			}
		}
		$this->lastEtvaAgentCriteria = $criteria;
		return $this->collEtvaAgents;
	}

	/**
	 * Returns the number of related EtvaAgent objects.
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct
	 * @param      PropelPDO $con
	 * @return     int Count of related EtvaAgent objects.
	 * @throws     PropelException
	 */
	public function countEtvaAgents(Criteria $criteria = null, $distinct = false, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(EtvaServerPeer::DATABASE_NAME);
		} else {
			$criteria = clone $criteria;
		}

		if ($distinct) {
			$criteria->setDistinct();
		}

		$count = null;

		if ($this->collEtvaAgents === null) {
			if ($this->isNew()) {
				$count = 0;
			} else {

				$criteria->add(EtvaAgentPeer::SERVER_ID, $this->id);

				$count = EtvaAgentPeer::doCount($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return count of the collection.


				$criteria->add(EtvaAgentPeer::SERVER_ID, $this->id);

				if (!isset($this->lastEtvaAgentCriteria) || !$this->lastEtvaAgentCriteria->equals($criteria)) {
					$count = EtvaAgentPeer::doCount($criteria, $con);
				} else {
					$count = count($this->collEtvaAgents);
				}
			} else {
				$count = count($this->collEtvaAgents);
			}
		}
		$this->lastEtvaAgentCriteria = $criteria;
		return $count;
	}

	/**
	 * Method called to associate a EtvaAgent object to this object
	 * through the EtvaAgent foreign key attribute.
	 *
	 * @param      EtvaAgent $l EtvaAgent
	 * @return     void
	 * @throws     PropelException
	 */
	public function addEtvaAgent(EtvaAgent $l)
	{
		if ($this->collEtvaAgents === null) {
			$this->initEtvaAgents();
		}
		if (!in_array($l, $this->collEtvaAgents, true)) { // only add it if the **same** object is not already associated
			array_push($this->collEtvaAgents, $l);
			$l->setEtvaServer($this);
		}
	}

	/**
	 * Clears out the collEtvaNetworks collection (array).
	 *
	 * This does not modify the database; however, it will remove any associated objects, causing
	 * them to be refetched by subsequent calls to accessor method.
	 *
	 * @return     void
	 * @see        addEtvaNetworks()
	 */
	public function clearEtvaNetworks()
	{
		$this->collEtvaNetworks = null; // important to set this to NULL since that means it is uninitialized
	}

	/**
	 * Initializes the collEtvaNetworks collection (array).
	 *
	 * By default this just sets the collEtvaNetworks collection to an empty array (like clearcollEtvaNetworks());
	 * however, you may wish to override this method in your stub class to provide setting appropriate
	 * to your application -- for example, setting the initial array to the values stored in database.
	 *
	 * @return     void
	 */
	public function initEtvaNetworks()
	{
		$this->collEtvaNetworks = array();
	}

	/**
	 * Gets an array of EtvaNetwork objects which contain a foreign key that references this object.
	 *
	 * If this collection has already been initialized with an identical Criteria, it returns the collection.
	 * Otherwise if this EtvaServer has previously been saved, it will retrieve
	 * related EtvaNetworks from storage. If this EtvaServer is new, it will return
	 * an empty collection or the current collection, the criteria is ignored on a new object.
	 *
	 * @param      PropelPDO $con
	 * @param      Criteria $criteria
	 * @return     array EtvaNetwork[]
	 * @throws     PropelException
	 */
	public function getEtvaNetworks($criteria = null, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(EtvaServerPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collEtvaNetworks === null) {
			if ($this->isNew()) {
			   $this->collEtvaNetworks = array();
			} else {

				$criteria->add(EtvaNetworkPeer::SERVER_ID, $this->id);

				EtvaNetworkPeer::addSelectColumns($criteria);
				$this->collEtvaNetworks = EtvaNetworkPeer::doSelect($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return the collection.


				$criteria->add(EtvaNetworkPeer::SERVER_ID, $this->id);

				EtvaNetworkPeer::addSelectColumns($criteria);
				if (!isset($this->lastEtvaNetworkCriteria) || !$this->lastEtvaNetworkCriteria->equals($criteria)) {
					$this->collEtvaNetworks = EtvaNetworkPeer::doSelect($criteria, $con);
				}
			}
		}
		$this->lastEtvaNetworkCriteria = $criteria;
		return $this->collEtvaNetworks;
	}

	/**
	 * Returns the number of related EtvaNetwork objects.
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct
	 * @param      PropelPDO $con
	 * @return     int Count of related EtvaNetwork objects.
	 * @throws     PropelException
	 */
	public function countEtvaNetworks(Criteria $criteria = null, $distinct = false, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(EtvaServerPeer::DATABASE_NAME);
		} else {
			$criteria = clone $criteria;
		}

		if ($distinct) {
			$criteria->setDistinct();
		}

		$count = null;

		if ($this->collEtvaNetworks === null) {
			if ($this->isNew()) {
				$count = 0;
			} else {

				$criteria->add(EtvaNetworkPeer::SERVER_ID, $this->id);

				$count = EtvaNetworkPeer::doCount($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return count of the collection.


				$criteria->add(EtvaNetworkPeer::SERVER_ID, $this->id);

				if (!isset($this->lastEtvaNetworkCriteria) || !$this->lastEtvaNetworkCriteria->equals($criteria)) {
					$count = EtvaNetworkPeer::doCount($criteria, $con);
				} else {
					$count = count($this->collEtvaNetworks);
				}
			} else {
				$count = count($this->collEtvaNetworks);
			}
		}
		$this->lastEtvaNetworkCriteria = $criteria;
		return $count;
	}

	/**
	 * Method called to associate a EtvaNetwork object to this object
	 * through the EtvaNetwork foreign key attribute.
	 *
	 * @param      EtvaNetwork $l EtvaNetwork
	 * @return     void
	 * @throws     PropelException
	 */
	public function addEtvaNetwork(EtvaNetwork $l)
	{
		if ($this->collEtvaNetworks === null) {
			$this->initEtvaNetworks();
		}
		if (!in_array($l, $this->collEtvaNetworks, true)) { // only add it if the **same** object is not already associated
			array_push($this->collEtvaNetworks, $l);
			$l->setEtvaServer($this);
		}
	}

	/**
	 * Clears out the collEtvaServices collection (array).
	 *
	 * This does not modify the database; however, it will remove any associated objects, causing
	 * them to be refetched by subsequent calls to accessor method.
	 *
	 * @return     void
	 * @see        addEtvaServices()
	 */
	public function clearEtvaServices()
	{
		$this->collEtvaServices = null; // important to set this to NULL since that means it is uninitialized
	}

	/**
	 * Initializes the collEtvaServices collection (array).
	 *
	 * By default this just sets the collEtvaServices collection to an empty array (like clearcollEtvaServices());
	 * however, you may wish to override this method in your stub class to provide setting appropriate
	 * to your application -- for example, setting the initial array to the values stored in database.
	 *
	 * @return     void
	 */
	public function initEtvaServices()
	{
		$this->collEtvaServices = array();
	}

	/**
	 * Gets an array of EtvaService objects which contain a foreign key that references this object.
	 *
	 * If this collection has already been initialized with an identical Criteria, it returns the collection.
	 * Otherwise if this EtvaServer has previously been saved, it will retrieve
	 * related EtvaServices from storage. If this EtvaServer is new, it will return
	 * an empty collection or the current collection, the criteria is ignored on a new object.
	 *
	 * @param      PropelPDO $con
	 * @param      Criteria $criteria
	 * @return     array EtvaService[]
	 * @throws     PropelException
	 */
	public function getEtvaServices($criteria = null, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(EtvaServerPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collEtvaServices === null) {
			if ($this->isNew()) {
			   $this->collEtvaServices = array();
			} else {

				$criteria->add(EtvaServicePeer::SERVER_ID, $this->id);

				EtvaServicePeer::addSelectColumns($criteria);
				$this->collEtvaServices = EtvaServicePeer::doSelect($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return the collection.


				$criteria->add(EtvaServicePeer::SERVER_ID, $this->id);

				EtvaServicePeer::addSelectColumns($criteria);
				if (!isset($this->lastEtvaServiceCriteria) || !$this->lastEtvaServiceCriteria->equals($criteria)) {
					$this->collEtvaServices = EtvaServicePeer::doSelect($criteria, $con);
				}
			}
		}
		$this->lastEtvaServiceCriteria = $criteria;
		return $this->collEtvaServices;
	}

	/**
	 * Returns the number of related EtvaService objects.
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct
	 * @param      PropelPDO $con
	 * @return     int Count of related EtvaService objects.
	 * @throws     PropelException
	 */
	public function countEtvaServices(Criteria $criteria = null, $distinct = false, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(EtvaServerPeer::DATABASE_NAME);
		} else {
			$criteria = clone $criteria;
		}

		if ($distinct) {
			$criteria->setDistinct();
		}

		$count = null;

		if ($this->collEtvaServices === null) {
			if ($this->isNew()) {
				$count = 0;
			} else {

				$criteria->add(EtvaServicePeer::SERVER_ID, $this->id);

				$count = EtvaServicePeer::doCount($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return count of the collection.


				$criteria->add(EtvaServicePeer::SERVER_ID, $this->id);

				if (!isset($this->lastEtvaServiceCriteria) || !$this->lastEtvaServiceCriteria->equals($criteria)) {
					$count = EtvaServicePeer::doCount($criteria, $con);
				} else {
					$count = count($this->collEtvaServices);
				}
			} else {
				$count = count($this->collEtvaServices);
			}
		}
		$this->lastEtvaServiceCriteria = $criteria;
		return $count;
	}

	/**
	 * Method called to associate a EtvaService object to this object
	 * through the EtvaService foreign key attribute.
	 *
	 * @param      EtvaService $l EtvaService
	 * @return     void
	 * @throws     PropelException
	 */
	public function addEtvaService(EtvaService $l)
	{
		if ($this->collEtvaServices === null) {
			$this->initEtvaServices();
		}
		if (!in_array($l, $this->collEtvaServices, true)) { // only add it if the **same** object is not already associated
			array_push($this->collEtvaServices, $l);
			$l->setEtvaServer($this);
		}
	}

	/**
	 * Resets all collections of referencing foreign keys.
	 *
	 * This method is a user-space workaround for PHP's inability to garbage collect objects
	 * with circular references.  This is currently necessary when using Propel in certain
	 * daemon or large-volumne/high-memory operations.
	 *
	 * @param      boolean $deep Whether to also clear the references on all associated objects.
	 */
	public function clearAllReferences($deep = false)
	{
		if ($deep) {
			if ($this->collEtvaAgents) {
				foreach ((array) $this->collEtvaAgents as $o) {
					$o->clearAllReferences($deep);
				}
			}
			if ($this->collEtvaNetworks) {
				foreach ((array) $this->collEtvaNetworks as $o) {
					$o->clearAllReferences($deep);
				}
			}
			if ($this->collEtvaServices) {
				foreach ((array) $this->collEtvaServices as $o) {
					$o->clearAllReferences($deep);
				}
			}
		} // if ($deep)

		$this->collEtvaAgents = null;
		$this->collEtvaNetworks = null;
		$this->collEtvaServices = null;
			$this->aEtvaLogicalvolume = null;
			$this->aEtvaNode = null;
			$this->asfGuardGroup = null;
	}


  public function __call($method, $arguments)
  {
    if (!$callable = sfMixer::getCallable('BaseEtvaServer:'.$method))
    {
      throw new sfException(sprintf('Call to undefined method BaseEtvaServer::%s', $method));
    }

    array_unshift($arguments, $this);

    return call_user_func_array($callable, $arguments);
  }


} // BaseEtvaServer
