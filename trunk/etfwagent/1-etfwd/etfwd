#!/usr/bin/perl
# Copywrite Eurotux 2009
# 
# CMAR 2009/06/30 (cmar@eurotux.com)

use strict;

use ETVA::Agent::SOAPFork;
use ETVA::Client::SOAP::HTTP;
use ETFW;
use ETFW::Network;
use ETVA::Utils;

use Data::Dumper;
use Socket;

my %CONF = ( "CFG_FILE"=>"/etc/sysconfig/etva-etfw/etfwd.conf" );

sub main {
    $CONF{"CFG_FILE"} = $ENV{'CFG_FILE'} if( $ENV{'CFG_FILE'} );
    loadfunc();
    launch_agent();
}

sub loadfunc {
    %CONF = ETVA::Utils::get_conf(1,$CONF{"CFG_FILE"});
}
sub getmacaddr {
    my $if;
    my $cm_uri = $CONF{'cm_uri'};
    if( $cm_uri =~ m/^http:\/\/([^\/]+)\// ){
        my ($cm_ip) = ($1);
        # convert to ip
        $cm_ip = inet_ntoa(inet_aton($cm_ip)) if( $cm_ip !~ m/\d+\.\d+\.\d+\.\d+/ );
        my ($e,$m) = cmd_exec("ip route get $cm_ip");
        ($if) = ( $m =~ m/^\S+\s+\S+\s+(\S+)/gs );
    }
    my %If = $if ? ETVA::Utils::get_interface($if)
                    : ETVA::Utils::get_defaultinterface();
    my $old_macaddr = $CONF{'macaddr'};
    $CONF{'macaddr'} = lc $If{'macaddress'} if( $If{'macaddress'} );

    if( $old_macaddr ne $CONF{'macaddr'} ){
        # write to config file
        ETVA::Utils::set_conf($CONF{'CFG_FILE'},%CONF);
    }
    return $CONF{'macaddr'};
}
sub launch_agent {

    # get network interface to initialize agent with macaddress
    &getmacaddr();

    # register func handlers
    $CONF{'_register_handler'} = \&register_handler;

    require ETFWDispatcher;

    my $dispatcher = $CONF{'_dispatcher'} = "ETFWDispatcher";

    my $Agent = ETVA::Agent::SOAPFork->new( %CONF );

    $Agent->mainLoop();
}
sub register_handler {
    my ($agent) = @_;

    # initialized on CentralManagement 
    if( $agent->{'cm_uri'} ){

        # get ETFW active modules
        my %Mod = ETFW->get_activemodules();
        my @services = ();
        for my $m (keys %Mod){
            my $pmod = $Mod{"$m"};
            eval "require $pmod";
            if( !$@ ){
                my %params = ( "dispatcher"=>$pmod );
                eval { 
                    # trie run load config of module
                    my %C = $pmod->get_config();
                    if( %C ){
                        # send parameters from config of module
                        %params = (%params,%C);
                    }
                };
                push(@services, { name=>$m, description=>"$m ($pmod)",
                                    params=>\%params } );
            } else{
                plog "etfw - Perl module '$pmod' required!";
            }
        }
        my $now = now();
        plog("$now - init Agent with macaddr=",$agent->{'macaddr'});
        plog(" services = ",Dumper(\@services));

        my $R = new ETVA::Client::SOAP::HTTP( uri => $agent->{'cm_uri'} )
                    -> call( $agent->{'cm_namespace'},
                             "initAgentServices",
                                name=>'ETFW',
                                ip=>$agent->{'LocalIP'},
                                port=>$agent->{'LocalPort'},
                                macaddr=>$agent->{'macaddr'},
                                services=>\@services
                            );
        if( !$R || $R->{'_error_'} ){
            plog("Cant connect to CentralManagement.\nInitialization Agent 'etfw' aborted!");
        } else {
            if( ref($R->{'return'}) && $R->{'return'}{'success'} && ( $R->{'return'}{'success'} ne 'false' ) ){
                plog("$now - ETFW Agent register with success on CentralManagement");


                my $resetError = 0;
                # Reset
                if( $R->{'return'}{'reset'} ){
                    ETFW->set_backupconf( '_url'=>"$R->{'return'}{'backup_url'}" );
                    # load old conf
                    my %old_CONF = ETVA::Utils::get_conf(1,$CONF{"CFG_FILE"});
                    # merge with new conf
                    %CONF = (%old_CONF, %CONF);
                    # save to file
                    ETVA::Utils::set_conf($CONF{"CFG_FILE"},%CONF);


                    # TODO restart service
                }

                if( !$resetError && $R->{'return'}{'reset'} ){
                    my $reset_ok = retOk("_OK_","ok");
                    my $RR = new ETVA::Client::SOAP::HTTP( uri => $agent->{'cm_uri'} )
                            -> call( $agent->{'cm_namespace'},
                                        'restoreManagAgent',
                                        macaddr=>$agent->{'macaddr'},
                                        ok=>{ 'oktype'=>$reset_ok->{'_oktype_'}, 'okmsg'=>$reset_ok->{'_okmsg_'} }
                                    );
                }
            }
        }
    }
}
main();
1;
